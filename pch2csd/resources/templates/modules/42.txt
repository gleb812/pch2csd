;@ map LOGsub LOGlow LOGhii
;@ ins k k
;@ outs k
opcode Delay, 0, kkkkkkk
  kTime,kMod,kRange,kMode,kIn,kTMod,kout xin
  kin zkr kIn
  ktmod zkr kTMod

  kTime += kMod * ktmod/127
  if kRange == 0 then
      kTime table kTime, giLOGlow
  elseif kRange == 1 then
      kTime table kTime, giLOGhii
  elseif kRange == 2 then
      kTime table kTime, giLOGsub
  endif

kTime /= 1000

  kin K2Y kin

  kON trigger kin, .5, 0
  kOFF trigger kin,.5, 1

  if kON != 1 goto Next
    kCurr1 = 0
  Next:
    kCurr1 limit kCurr1, 0, kTime
      if kMode != 1 goto Modes0_2
      kOut1 = kin
      goto Next2
  Modes0_2:
    kOut1 = (kCurr1 < kTime ? 0:kin)
  Next2:
    kCurr1 += 1/kr

  if kOFF != 1 goto Next3
    kCurr2 = 0
    Next3:
    kCurr2 limit kCurr2, 0, kTime
        if kMode != 0 goto Modes1_2
        kOut2 = 0
        goto Next4
    Modes1_2:
      kOut2 = (kCurr2 < kTime ? 1:0)
    Next4:
      kCurr2 += 1/kr

  kOut = kOut1 + kOut2
  kOut limit kOut, 0, 1
  zkw kOut, kout
endop

;@ ins a a
;@ outs a
opcode Delay, 0, kkkkkkk
  kTime,kMod,kRange,kMode,kIn,kTMod,kout xin
  setksmps 1
  ain zar kIn
  atmod zar kTMod
  kin = k(ain)
  ktmod = k(atmod)

  kTime += kMod * ktmod/127
  if kRange == 0 then
      kTime table kTime, giLOGlow
  elseif kRange == 1 then
      kTime table kTime, giLOGhii
  elseif kRange == 2 then
      kTime table kTime, giLOGsub
  endif

kTime /= 1000

  kin K2Y kin

  kON trigger kin, .5, 0
  kOFF trigger kin,.5, 1

  if kON != 1 goto Next
    kCurr1 = 0
  Next:
    kCurr1 limit kCurr1, 0, kTime
      if kMode != 1 goto Modes0_2
      kOut1 = kin
      goto Next2
  Modes0_2:
    kOut1 = (kCurr1 < kTime ? 0:kin)
  Next2:
    kCurr1 += 1/kr

  if kOFF != 1 goto Next3
    kCurr2 = 0
    Next3:
    kCurr2 limit kCurr2, 0, kTime
        if kMode != 0 goto Modes1_2
        kOut2 = 0
        goto Next4
    Modes1_2:
      kOut2 = (kCurr2 < kTime ? 1:0)
    Next4:
      kCurr2 += 1/kr

  kOut = kOut1 + kOut2
  kOut limit kOut, 0, 1
  zaw a(kOut), kout
endop
