;@ map ENVtim
;@ ins k k k
;@ outs k k

opcode EnvAHD, 0, kkkkkkkkkkkk
	kShape,kA_,kH_,kReset,kD_,kType,kKB, kTrig_,kAMi,kin,kEnvO,kout xin

	k1[] fillarray 1,-1, 1,-1, 2,-2
	k2[] fillarray 0, 1,-1, 0,-1, 1

	kIn zkr kin

	kEnv init 0
	kEnv0 init 0
	kEnv1 init 0
	kstate init 0
	kShapeLst init 0
	kTime0 init 0
	kTime init 0
	kAM init 1

	kA table kA_, giENVtim
	  kD table kD_, giENVtim
	kH table kH_, giENVtim

	kA /= 1000
	kD /= 1000
	kH /= 1000

	if kAMi < 2 goto NoAM
		kAM zkr kAMi
NoAM:
kTrig zkr kTrig_
	if kKB!= 1 goto NoKB
		kTrig += gkGate
NoKB:
	if kShape == kShapeLst goto Next
		kTime0 = kTime
		kEnv0 = kEnv
  		kShapeLst = kShape
Next:

kTrigT trigger kTrig, 0.000001, 0
if kTrigT == 1 then
	;if (kReset == 1) || (kstate == 0) then
	if kstate == 0 then
		kEnv = 0
		kTime = 0
		kEnv0 = 0
		kTime0 = 0
		kstate = 1
	endif
endif
	if kstate == 0 goto EnvOut
	if kstate == 2 goto Hold
	if kstate == 3 goto Decay
Attack:
	if kShape == 0 then
		kEnv = kEnv0 + (1.013-kEnv0)*(1 - exp(-4*(kTime-kTime0)/(kA*kr)))
	elseif kShape == 2 then
		kEnv = kEnv0 +(1-kEnv0)*(exp((kTime-kTime0)/(kA*kr - kTime0)*1.791759)-1)/5
	else
		kEnv += 1/(kr*kA)
	endif
	kTime += 1
	kEnv limit kEnv, 0, 1

	if kEnv < 1 goto EnvOut
	kstate = 2; Hold
	kTime = 0
	kEnv0 = 1
	kTime0 = 0
Hold:
	kTime += 1
	if (kTime/kr) < kH goto EnvOut
	kstate = 3 ; Decay
	kTime = 0
	kEnv0 = 1
	kTime0 = 0
Decay:
	if kShape < 3 then
		kEnv = kEnv0*(exp(-8*(kTime-kTime0)/(kD*kr)))
	else
		kEnv -= kEnv0/(kr*kD-kTime0)
	endif
	kTime += 1

	kEnv limit kEnv, 0, 1
	if (kTime/kr) < kD  goto EnvOut
	kstate = 0  ; back to waiting for trig
	kTime = 0
	kEnv0 = 0
	kTime0 = 0
EnvOut:
	kEnv *= kAM
	kEnv1 = kEnv*k1[kType]+k2[kType]
	zkw kEnv1, kEnvO
	zkw kEnv1*kIn, kout
endop

;@ ins k k a
;@ outs k a

opcode EnvAHD, 0, kkkkkkkkkkkk
	kShape,kA_,kH_,kReset,kD_,kType,kKB, kTrig_,kAMi,kin,kEnvO,kout xin

	k1[] fillarray 1,-1, 1,-1, 2,-2
	k2[] fillarray 0, 1,-1, 0,-1, 1

	aIn zar kin

	kEnv init 0
	kEnv0 init 0
	kEnv1 init 0
	kstate init 0
	kShapeLst init 0
	kTime0 init 0
	kTime init 0
	kAM init 1

	kA table kA_, giENVtim
	  kD table kD_, giENVtim
	kH table kH_, giENVtim

	kA /= 1000
	kD /= 1000
	kH /= 1000

	if kAMi < 2 goto NoAM
		kAM zkr kAMi
NoAM:
kTrig zkr kTrig_
	if kKB!= 1 goto NoKB
		kTrig += gkGate
NoKB:
	if kShape == kShapeLst goto Next
		kTime0 = kTime
		kEnv0 = kEnv
  		kShapeLst = kShape
Next:

kTrigT trigger kTrig, 0.000001, 0
if kTrigT == 1 then
	;if (kReset == 1) || (kstate == 0) then
	if kstate == 0 then
		kEnv = 0
		kTime = 0
		kEnv0 = 0
		kTime0 = 0
		kstate = 1
	endif
endif
	if kstate == 0 goto EnvOut
	if kstate == 2 goto Hold
	if kstate == 3 goto Decay
Attack:
	if kShape == 0 then
		kEnv = kEnv0 + (1.013-kEnv0)*(1 - exp(-4*(kTime-kTime0)/(kA*kr)))
	elseif kShape == 2 then
		kEnv = kEnv0 +(1-kEnv0)*(exp((kTime-kTime0)/(kA*kr - kTime0)*1.791759)-1)/5
	else
		kEnv += 1/(kr*kA)
	endif
	kTime += 1
	kEnv limit kEnv, 0, 1

	if kEnv < 1 goto EnvOut
	kstate = 2; Hold
	kTime = 0
	kEnv0 = 1
	kTime0 = 0
Hold:
	kTime += 1
	if (kTime/kr) < kH goto EnvOut
	kstate = 3 ; Decay
	kTime = 0
	kEnv0 = 1
	kTime0 = 0
Decay:
	if kShape < 3 then
		kEnv = kEnv0*(exp(-8*(kTime-kTime0)/(kD*kr)))
	else
		kEnv -= kEnv0/(kr*kD-kTime0)
	endif
	kTime += 1

	kEnv limit kEnv, 0, 1
	if (kTime/kr) < kD  goto EnvOut
	kstate = 0  ; back to waiting for trig
	kTime = 0
	kEnv0 = 0
	kTime0 = 0
EnvOut:
	kEnv *= kAM
	kEnv1 = kEnv*k1[kType]+k2[kType]
	zkw kEnv1, kEnvO
	zaw kEnv1*aIn, kout
endop
